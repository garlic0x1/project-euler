/*


Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle         Tn=n(n+1)/2         1, 3, 6, 10, 15, ...
Pentagonal         Pn=n(3nâˆ’1)/2         1, 5, 12, 22, 35, ...
Hexagonal         Hn=n(2nâˆ’1)         1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.

*/

use std::collections::HashSet;

pub fn pe45() {
    let tris = triangles(100_000);
    let pents = pentagons(100_000);
    let hexs = hexagons(100_000);

    for t in tris
        .iter()
        .filter(|x| pents.contains(x) && hexs.contains(x))
    {
        println!("{t}");
    }
}

fn triangles(limit: u64) -> HashSet<u64> {
    let mut set = HashSet::new();
    for n in 1..limit {
        set.insert((n * (n + 1)) / 2);
    }
    set
}
fn pentagons(limit: u64) -> HashSet<u64> {
    let mut set = HashSet::new();
    for n in 1..limit {
        set.insert((n * (3 * n - 1)) / 2);
    }
    set
}
fn hexagons(limit: u64) -> HashSet<u64> {
    let mut set = HashSet::new();
    for n in 1..limit {
        set.insert(n * (2 * n - 1));
    }
    set
}
