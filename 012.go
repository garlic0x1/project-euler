/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

package main

import "fmt"

func main() {
	fmt.Println(euler12())
}

func euler12() int {
	triangle := 1
	for i := 2; true; i++ {
		if nFactors(triangle) > 500 {
			return triangle
		}
		triangle += i
	}
	return 0
}

func nFactors(n int) int {
	c := 0
	limit := n
	for i := 1; i < limit; i++ {
		if (n % i) == 0 {
			c += 2
			limit = n / i
		}
	}
	return c
}

/*
func factor(n int) []int {
	var ret []int
	limit := n
	for i := 1; i < limit; i++ {
		if (n % i) == 0 {
			ret = append(ret, i, n/i)
			limit = n / i
		}
	}
	return ret
}
*/
